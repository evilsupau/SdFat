################################################################################

style=allman
indent=spaces=4

# int Foo(bool isBar)
# {
#     if (isBar)
#     {
#         bar();
#         return 1;
#     }
#     else
#         return 0;
# }

################################################################################

################################################################################

max-continuation-indent=40

# fooArray[] = { red,
#          green,
#          blue };
# 
# fooFunction(barArg1,
#          barArg2,
#          barArg3);
# becomes (with larger value):
# 
# fooArray[] = { red,
#                green,
#                blue };
# 
# fooFunction(barArg1,
#             barArg2,
#             barArg3);

################################################################################

################################################################################

attach-closing-while

# do
# {
#     bar();
#     ++x;
# }
# while x == 1;
# becomes:
# 
# do
# {
#     bar();
#     ++x;
# } while x == 1;

################################################################################

################################################################################

indent-switches

# switch (foo)
# {
#     case 1:
#         a += 1;
#         break;
#
#     case 2:
#     {
#         a += 2;
#         break;
#     }
# }

################################################################################

################################################################################

indent-namespaces

# namespace foospace
# {
# class Foo
# {
#     public:
#         Foo();
#         virtual ~Foo();
# };
# }
# becomes:
# 
# namespace foospace
# {
#     class Foo
#     {
#         public:
#             Foo();
#             virtual ~Foo();
#     };
# }

################################################################################

################################################################################

indent-labels

# void Foo() {
#     while (isFoo) {
#         if (isFoo)
#             goto error;
#         ...
# error:
#         ...
#         }
# }
# becomes (with indented 'error:'):
# 
# void Foo() {
#     while (isFoo) {
#         if (isFoo)
#             goto error;
#         ...
#     error:
#         ...
#         }
# }

################################################################################

################################################################################

indent-preproc-define

# #define Is_Bar(arg,a,b) \
#     (Is_Foo((arg), (a)) \
#     || Is_Foo((arg), (b)))

################################################################################

################################################################################

min-conditional-indent=0

# if (a < b
#     || c > d)
# {
#     foo++;
# }

################################################################################

################################################################################

pad-oper

# if (foo==2)
#     a=bar((b-c)*a,d--);
# becomes:
# 
# if (foo == 2)
#     a = bar((b - c) * a, d--);

################################################################################

################################################################################

pad-comma

# if (isFoo(a,b))
#     bar(a,b);
# becomes:
# 
# if (isFoo(a, b))
#     bar(a, b);

################################################################################
    
################################################################################

pad-header

# if (isFoo((a+2), b)) /*for, while, ...*/
# {
#     bar(a, b);
# }

################################################################################

################################################################################

unpad-paren

# if (isFoo((a+2), b)) /* <- if ( isFoo ( ( a+2 ) , b ) ) */
# {
#     bar(a, b);
# }

################################################################################

################################################################################

align-pointer=type
align-reference=type

# char* foo1;
# char& foo2;

################################################################################

################################################################################

break-one-line-headers

# void Foo(bool isFoo)
# {
#     if (isFoo1) bar1();
# 
#     if (isFoo2) { bar2(); }
# }
# becomes:
# 
# void Foo(bool isFoo)
# {
#     if (isFoo1)
#         bar1();
# 
#     if (isFoo2) {
#         bar2();
#     }
# }

################################################################################

################################################################################

add-braces

# if (isFoo)
#     isFoo = false;
# becomes:
# 
# if (isFoo) {
#     isFoo = false;
# }

################################################################################

################################################################################

convert-tabs

################################################################################

################################################################################

attach-return-type
attach-return-type-decl

# void
# Foo(bool isFoo);
# becomes:
# 
# void Foo(bool isFoo);

################################################################################

################################################################################

mode=c

################################################################################

################################################################################

suffix=none
preserve-date
lineend=windows
formatted
recursive

################################################################################

################################################################################

#suffix=.fmt.bak

################################################################################
